package crypto

import "testing"

var rsaPriv = []byte{0x8, 0x0, 0x12, 0xa7, 0x9, 0x30, 0x82, 0x4, 0xa3, 0x2, 0x1, 0x0, 0x2, 0x82, 0x1, 0x1, 0x0, 0xaf, 0xac, 0x1b, 0xc, 0x70, 0x2a, 0xd3, 0xee, 0xf2, 0x0, 0x6, 0x17, 0xca, 0xa0, 0x83, 0x1e, 0xdc, 0xfc, 0xa7, 0x79, 0x41, 0x85, 0x18, 0x6a, 0x8a, 0x2d, 0x2e, 0x39, 0xf9, 0xd0, 0x98, 0x1, 0xd0, 0xe0, 0x70, 0xfd, 0x2a, 0xf2, 0x4b, 0xe0, 0x36, 0x17, 0x5f, 0x89, 0xe2, 0xb9, 0xc8, 0xf2, 0x15, 0x71, 0x45, 0x22, 0xd, 0x8d, 0x50, 0x5e, 0x81, 0xa5, 0x2d, 0xb7, 0xbe, 0x14, 0x5b, 0x6d, 0xc1, 0x98, 0xbf, 0x5f, 0xee, 0x63, 0x47, 0x6c, 0xc4, 0xf, 0xe7, 0xf8, 0x9, 0x60, 0x3a, 0x96, 0x91, 0xce, 0x45, 0xe1, 0x6, 0x13, 0xa2, 0xf3, 0xe1, 0xa0, 0x6b, 0xe0, 0xad, 0x68, 0x5f, 0xa2, 0xf8, 0x6, 0xf1, 0xf2, 0xc2, 0xf, 0x7d, 0xde, 0x6b, 0x6a, 0xd6, 0x90, 0xbb, 0xd2, 0xc3, 0x8d, 0xb2, 0x80, 0x39, 0x11, 0x3f, 0x32, 0xc5, 0x20, 0xc4, 0xe3, 0xf9, 0x48, 0xa1, 0x2e, 0x77, 0x16, 0x28, 0xd5, 0x41, 0xf3, 0x83, 0x95, 0x15, 0x49, 0xc, 0x0, 0x2e, 0x79, 0xfd, 0xae, 0x60, 0xf4, 0xd6, 0x3, 0x31, 0x16, 0xb2, 0x0, 0x6a, 0xa7, 0xd, 0xcb, 0xbd, 0x8f, 0x6, 0xf3, 0x12, 0xe, 0xb0, 0x82, 0xa3, 0x9f, 0x4c, 0xd5, 0xc1, 0x1e, 0x3d, 0x2b, 0x7e, 0x56, 0x81, 0x65, 0x3, 0xd5, 0xe, 0x84, 0x81, 0xca, 0xd6, 0xe4, 0x10, 0xb0, 0xd, 0x47, 0x7, 0xb9, 0xb6, 0xe6, 0x24, 0xbe, 0x46, 0x5b, 0x13, 0x46, 0x9a, 0x95, 0x85, 0x35, 0xc1, 0xf2, 0x45, 0xc3, 0x9d, 0xe1, 0x0, 0xd1, 0x3d, 0x53, 0x81, 0x2a, 0x93, 0xbf, 0x62, 0xce, 0x52, 0xe0, 0x6a, 0x75, 0xe4, 0x12, 0xc5, 0xf6, 0x15, 0x62, 0x24, 0x38, 0x4e, 0x3, 0xdc, 0x97, 0x8b, 0x31, 0xc1, 0xac, 0x7c, 0x5d, 0x7f, 0xf8, 0x1c, 0xad, 0x68, 0x29, 0xf5, 0x9c, 0x77, 0xea, 0xb7, 0x58, 0x81, 0x79, 0xe9, 0x32, 0x3a, 0xa7, 0x2, 0x3, 0x1, 0x0, 0x1, 0x2, 0x82, 0x1, 0x0, 0x5d, 0x69, 0xb6, 0x24, 0x62, 0xc, 0xd4, 0xf, 0x6e, 0x4d, 0xc6, 0xef, 0xa5, 0xc6, 0xbe, 0x92, 0x8d, 0xce, 0x27, 0xbb, 0xd9, 0xb4, 0x4d, 0x6c, 0x71, 0xb7, 0x5e, 0xaa, 0x63, 0x85, 0xa1, 0x1e, 0xee, 0x14, 0x3a, 0xe0, 0xd4, 0x92, 0x6c, 0xf8, 0x77, 0xaa, 0xec, 0x19, 0xa5, 0x1f, 0x47, 0x94, 0x3b, 0x4, 0xb5, 0x4f, 0x4b, 0x47, 0x86, 0xa2, 0xa, 0x6c, 0x6c, 0x28, 0x15, 0x82, 0x3b, 0xaf, 0xdc, 0x4f, 0x3e, 0xc, 0x63, 0xf6, 0x14, 0xc7, 0xe8, 0x65, 0xd0, 0xe2, 0xdb, 0x11, 0x79, 0x76, 0x11, 0x68, 0x4f, 0x4e, 0x3d, 0xed, 0xf9, 0x2b, 0x98, 0x21, 0xb6, 0xdb, 0x8d, 0x3a, 0x40, 0x8, 0xa7, 0xbd, 0x1, 0xb1, 0x25, 0xb2, 0x19, 0x2b, 0x49, 0x91, 0x51, 0x31, 0x3b, 0x3e, 0xf2, 0xcf, 0x89, 0x48, 0x97, 0x8f, 0xed, 0x3c, 0x31, 0x8, 0xa0, 0xc9, 0xdd, 0x7, 0xda, 0xf5, 0x9b, 0x4a, 0xa2, 0xb8, 0x7b, 0xec, 0xe8, 0xd2, 0x8e, 0x7e, 0xd4, 0xbc, 0x5, 0x83, 0xea, 0xb, 0x3d, 0x1c, 0x7f, 0x4e, 0xea, 0xec, 0x6f, 0xb, 0x37, 0xdf, 0x0, 0xeb, 0x20, 0xac, 0xeb, 0x7f, 0x7d, 0x19, 0xdb, 0x47, 0xc0, 0x6b, 0xaa, 0x3c, 0xb1, 0x45, 0xc3, 0x1e, 0xa6, 0x19, 0x44, 0x3b, 0x5c, 0xee, 0x16, 0x26, 0x52, 0x77, 0xf0, 0xe2, 0x2f, 0x27, 0x8e, 0xc3, 0xf2, 0xa7, 0x13, 0x22, 0x9f, 0xf0, 0xd4, 0xcc, 0x53, 0x13, 0xa6, 0xfc, 0xc2, 0xee, 0x7e, 0x7b, 0x6e, 0x7b, 0xe3, 0xaf, 0x1b, 0x4f, 0x62, 0xc, 0x2c, 0x7c, 0xdc, 0x7f, 0x6f, 0xdf, 0x35, 0xf0, 0xca, 0x9b, 0xd2, 0x87, 0x1f, 0xd9, 0x57, 0xf1, 0x31, 0x81, 0x6b, 0xa, 0xc2, 0xfe, 0x41, 0x5c, 0x77, 0xb, 0xd6, 0xcd, 0xb6, 0x25, 0xb7, 0x9f, 0xb6, 0x61, 0xc1, 0xd7, 0xa6, 0xad, 0xb0, 0x47, 0x33, 0x34, 0x60, 0xe2, 0x7d, 0xe9, 0x2, 0x81, 0x81, 0x0, 0xd5, 0x23, 0xdd, 0xee, 0x8f, 0x47, 0x77, 0x2a, 0xde, 0x5e, 0x43, 0xe7, 0xc9, 0xe5, 0x20, 0x67, 0x2, 0x90, 0x2a, 0x5f, 0x4a, 0xbd, 0x32, 0x61, 0x85, 0x4d, 0x12, 0xed, 0x4f, 0xbe, 0x9, 0x88, 0xb3, 0x28, 0x29, 0xce, 0x8, 0xf8, 0x18, 0xcd, 0x4, 0x39, 0x9, 0x64, 0xf5, 0x6f, 0xa0, 0x12, 0x57, 0x5a, 0xef, 0xd4, 0x5f, 0x7f, 0xdd, 0x45, 0x23, 0x1f, 0xd1, 0xe6, 0x15, 0x1b, 0xfb, 0x8d, 0x35, 0x76, 0xab, 0x26, 0x86, 0x88, 0xfc, 0xa9, 0x81, 0x64, 0x39, 0x20, 0x98, 0x18, 0xc9, 0xc3, 0xb3, 0xc4, 0x85, 0x86, 0xf5, 0xe9, 0xed, 0x6a, 0x87, 0x90, 0x45, 0x57, 0x2, 0xf, 0xa0, 0xe8, 0x10, 0x8, 0xa7, 0x5e, 0xc8, 0x7, 0xbc, 0x7a, 0xda, 0x16, 0x2a, 0xea, 0x6d, 0x6d, 0x52, 0x9b, 0xa9, 0x7b, 0x25, 0x98, 0xf5, 0x68, 0x7e, 0x0, 0x36, 0x18, 0x97, 0x44, 0x84, 0xfe, 0xf2, 0xbb, 0x2, 0x81, 0x81, 0x0, 0xd2, 0xff, 0x73, 0xa0, 0x6d, 0x2b, 0xa5, 0xc3, 0x1f, 0x87, 0x7f, 0x91, 0xef, 0x8, 0xb4, 0xa1, 0x37, 0x5d, 0xc3, 0xe8, 0xd5, 0xae, 0xba, 0x94, 0x8e, 0x2f, 0xdc, 0xa2, 0xab, 0x5a, 0xe7, 0x9e, 0x43, 0xeb, 0xf8, 0xf5, 0x65, 0x27, 0xbb, 0x8, 0xf, 0x9b, 0xb6, 0xc1, 0xbc, 0x95, 0x95, 0xe, 0x60, 0xe3, 0x61, 0xd4, 0x79, 0x54, 0x6f, 0xa4, 0x51, 0x14, 0xd0, 0x17, 0x91, 0xb4, 0x46, 0xd4, 0x4f, 0x6b, 0x87, 0x92, 0xd8, 0x14, 0xa8, 0x9c, 0x76, 0x32, 0x1d, 0x5c, 0x7a, 0x59, 0x1d, 0x50, 0xfa, 0x67, 0x42, 0x63, 0x53, 0x1b, 0xbc, 0x1c, 0xb5, 0x62, 0xa3, 0x5d, 0x36, 0x65, 0x5b, 0x92, 0xbc, 0x20, 0xd5, 0xc, 0x62, 0x6, 0x65, 0x15, 0x55, 0xfd, 0x84, 0xd1, 0x22, 0x26, 0xb6, 0xce, 0xff, 0x5c, 0x9d, 0xec, 0xc5, 0xbf, 0x82, 0x5f, 0x57, 0xcd, 0xf2, 0x21, 0x70, 0x67, 0x27, 0x5, 0x2, 0x81, 0x81, 0x0, 0xd4, 0x12, 0xc9, 0xb, 0x4a, 0x83, 0x28, 0x5e, 0x7e, 0x3d, 0xbb, 0x41, 0x51, 0x90, 0xeb, 0x29, 0xb3, 0xd2, 0x30, 0x66, 0xfa, 0x9d, 0xc0, 0x18, 0x6a, 0xa3, 0x62, 0xd6, 0xbf, 0xc6, 0x6e, 0x4, 0x17, 0x87, 0x39, 0xf9, 0x68, 0xd1, 0x3b, 0x14, 0x1b, 0x44, 0x89, 0x45, 0x6c, 0x34, 0xb2, 0x48, 0x2d, 0xa5, 0x2d, 0x6, 0xda, 0x33, 0x6, 0xbe, 0x79, 0x11, 0x7b, 0x2f, 0x7d, 0x7, 0x87, 0xc7, 0x5c, 0x50, 0x4, 0x41, 0xe4, 0x11, 0x3f, 0x9d, 0x85, 0x42, 0x6c, 0xd9, 0x32, 0x9d, 0x4f, 0x7c, 0xab, 0x4d, 0x3a, 0x33, 0x2c, 0x52, 0xa3, 0x49, 0xa1, 0x33, 0x7a, 0xda, 0xf5, 0x11, 0x9, 0xe0, 0x7d, 0xbb, 0xae, 0x95, 0x4f, 0x60, 0xeb, 0x38, 0x2d, 0xf1, 0x6a, 0xa8, 0x31, 0x53, 0x5a, 0xa3, 0xca, 0x1, 0xdf, 0x4a, 0xf, 0xbc, 0xf5, 0xca, 0x4e, 0x9, 0x2f, 0xd2, 0x1c, 0xa6, 0xf4, 0x6b, 0x2, 0x81, 0x80, 0x3d, 0x74, 0x49, 0xa9, 0x20, 0x22, 0xe6, 0x54, 0xbe, 0x8a, 0x28, 0x8d, 0xc8, 0xa1, 0x30, 0x7b, 0x4, 0x35, 0x3b, 0x2a, 0x45, 0x92, 0x6e, 0xa5, 0x76, 0x4, 0x5a, 0xae, 0xc6, 0x59, 0xe3, 0xbc, 0x24, 0xec, 0x45, 0xc6, 0xb3, 0x7f, 0xae, 0xe9, 0xda, 0x21, 0xf0, 0x48, 0xdd, 0x34, 0x74, 0x5, 0x8c, 0x12, 0xae, 0x1b, 0xc4, 0x7a, 0xe3, 0x49, 0x68, 0x94, 0x37, 0x47, 0xa6, 0x18, 0x6b, 0xc8, 0xca, 0x98, 0xf7, 0x13, 0xbd, 0xfb, 0xc6, 0x60, 0x4b, 0xcc, 0xac, 0xe0, 0x92, 0x82, 0x2, 0x17, 0xe3, 0xd6, 0xcf, 0x6f, 0x3e, 0x75, 0x85, 0x84, 0x97, 0xf, 0xf3, 0xa4, 0xe2, 0x83, 0x2, 0xf8, 0xe9, 0xf2, 0x66, 0x1b, 0x5, 0x31, 0xf7, 0x9f, 0xf, 0x3c, 0x97, 0xc2, 0x91, 0xbf, 0xd4, 0xde, 0xd5, 0x61, 0x94, 0x5d, 0xb1, 0xfa, 0xe5, 0x6d, 0xff, 0x94, 0xec, 0x40, 0xf1, 0xc, 0x1a, 0x41, 0x2, 0x81, 0x80, 0x68, 0x70, 0x1d, 0xc1, 0xba, 0xea, 0xc6, 0x34, 0xbb, 0x38, 0x7b, 0x6, 0x63, 0xcb, 0xd2, 0x49, 0x4f, 0x75, 0xca, 0xf3, 0x26, 0x1e, 0x97, 0xe3, 0xda, 0xf6, 0x9d, 0x40, 0xff, 0x3d, 0x46, 0x69, 0x90, 0x77, 0x57, 0x6, 0x53, 0x7b, 0x26, 0xd7, 0x69, 0x3b, 0x2b, 0x8b, 0xec, 0xa, 0x92, 0x64, 0xf4, 0xb0, 0xb4, 0xdb, 0x74, 0x21, 0xa, 0x6f, 0xaa, 0xc8, 0x96, 0xc8, 0x7, 0x67, 0x7c, 0x18, 0xb3, 0x80, 0x87, 0x6e, 0x52, 0xa, 0x44, 0xc1, 0x68, 0x4, 0xe4, 0x48, 0x42, 0x52, 0x34, 0x6, 0xa1, 0x61, 0x5b, 0x9a, 0x2, 0x8c, 0x3a, 0xbe, 0x30, 0xc9, 0x21, 0x3e, 0xa3, 0x86, 0xe5, 0x5f, 0xa7, 0xb9, 0x1a, 0x91, 0x14, 0x87, 0x7b, 0x88, 0x30, 0x91, 0xe8, 0xe5, 0x1f, 0xc7, 0xc5, 0xbb, 0x74, 0xcf, 0xc5, 0x5f, 0x16, 0x8c, 0x21, 0x15, 0xc6, 0x9c, 0x6, 0x38, 0xb1, 0x8a, 0xb3, 0xe1}
var rsaPub = []byte{0x8, 0x0, 0x12, 0xa6, 0x2, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xaf, 0xac, 0x1b, 0xc, 0x70, 0x2a, 0xd3, 0xee, 0xf2, 0x0, 0x6, 0x17, 0xca, 0xa0, 0x83, 0x1e, 0xdc, 0xfc, 0xa7, 0x79, 0x41, 0x85, 0x18, 0x6a, 0x8a, 0x2d, 0x2e, 0x39, 0xf9, 0xd0, 0x98, 0x1, 0xd0, 0xe0, 0x70, 0xfd, 0x2a, 0xf2, 0x4b, 0xe0, 0x36, 0x17, 0x5f, 0x89, 0xe2, 0xb9, 0xc8, 0xf2, 0x15, 0x71, 0x45, 0x22, 0xd, 0x8d, 0x50, 0x5e, 0x81, 0xa5, 0x2d, 0xb7, 0xbe, 0x14, 0x5b, 0x6d, 0xc1, 0x98, 0xbf, 0x5f, 0xee, 0x63, 0x47, 0x6c, 0xc4, 0xf, 0xe7, 0xf8, 0x9, 0x60, 0x3a, 0x96, 0x91, 0xce, 0x45, 0xe1, 0x6, 0x13, 0xa2, 0xf3, 0xe1, 0xa0, 0x6b, 0xe0, 0xad, 0x68, 0x5f, 0xa2, 0xf8, 0x6, 0xf1, 0xf2, 0xc2, 0xf, 0x7d, 0xde, 0x6b, 0x6a, 0xd6, 0x90, 0xbb, 0xd2, 0xc3, 0x8d, 0xb2, 0x80, 0x39, 0x11, 0x3f, 0x32, 0xc5, 0x20, 0xc4, 0xe3, 0xf9, 0x48, 0xa1, 0x2e, 0x77, 0x16, 0x28, 0xd5, 0x41, 0xf3, 0x83, 0x95, 0x15, 0x49, 0xc, 0x0, 0x2e, 0x79, 0xfd, 0xae, 0x60, 0xf4, 0xd6, 0x3, 0x31, 0x16, 0xb2, 0x0, 0x6a, 0xa7, 0xd, 0xcb, 0xbd, 0x8f, 0x6, 0xf3, 0x12, 0xe, 0xb0, 0x82, 0xa3, 0x9f, 0x4c, 0xd5, 0xc1, 0x1e, 0x3d, 0x2b, 0x7e, 0x56, 0x81, 0x65, 0x3, 0xd5, 0xe, 0x84, 0x81, 0xca, 0xd6, 0xe4, 0x10, 0xb0, 0xd, 0x47, 0x7, 0xb9, 0xb6, 0xe6, 0x24, 0xbe, 0x46, 0x5b, 0x13, 0x46, 0x9a, 0x95, 0x85, 0x35, 0xc1, 0xf2, 0x45, 0xc3, 0x9d, 0xe1, 0x0, 0xd1, 0x3d, 0x53, 0x81, 0x2a, 0x93, 0xbf, 0x62, 0xce, 0x52, 0xe0, 0x6a, 0x75, 0xe4, 0x12, 0xc5, 0xf6, 0x15, 0x62, 0x24, 0x38, 0x4e, 0x3, 0xdc, 0x97, 0x8b, 0x31, 0xc1, 0xac, 0x7c, 0x5d, 0x7f, 0xf8, 0x1c, 0xad, 0x68, 0x29, 0xf5, 0x9c, 0x77, 0xea, 0xb7, 0x58, 0x81, 0x79, 0xe9, 0x32, 0x3a, 0xa7, 0x2, 0x3, 0x1, 0x0, 0x1}

func BenchmarkSignRSA1B(b *testing.B)      { RunBenchmarkSignRSA(b, 1) }
func BenchmarkSignRSA10B(b *testing.B)     { RunBenchmarkSignRSA(b, 10) }
func BenchmarkSignRSA100B(b *testing.B)    { RunBenchmarkSignRSA(b, 100) }
func BenchmarkSignRSA1000B(b *testing.B)   { RunBenchmarkSignRSA(b, 1000) }
func BenchmarkSignRSA10000B(b *testing.B)  { RunBenchmarkSignRSA(b, 10000) }
func BenchmarkSignRSA100000B(b *testing.B) { RunBenchmarkSignRSA(b, 100000) }

func BenchmarkVerifyRSA1B(b *testing.B)      { RunBenchmarkVerifyRSA(b, 1) }
func BenchmarkVerifyRSA10B(b *testing.B)     { RunBenchmarkVerifyRSA(b, 10) }
func BenchmarkVerifyRSA100B(b *testing.B)    { RunBenchmarkVerifyRSA(b, 100) }
func BenchmarkVerifyRSA1000B(b *testing.B)   { RunBenchmarkVerifyRSA(b, 1000) }
func BenchmarkVerifyRSA10000B(b *testing.B)  { RunBenchmarkVerifyRSA(b, 10000) }
func BenchmarkVerifyRSA100000B(b *testing.B) { RunBenchmarkVerifyRSA(b, 100000) }

func BenchmarkSignEd255191B(b *testing.B)      { RunBenchmarkSignEd25519(b, 1) }
func BenchmarkSignEd2551910B(b *testing.B)     { RunBenchmarkSignEd25519(b, 10) }
func BenchmarkSignEd25519100B(b *testing.B)    { RunBenchmarkSignEd25519(b, 100) }
func BenchmarkSignEd255191000B(b *testing.B)   { RunBenchmarkSignEd25519(b, 1000) }
func BenchmarkSignEd2551910000B(b *testing.B)  { RunBenchmarkSignEd25519(b, 10000) }
func BenchmarkSignEd25519100000B(b *testing.B) { RunBenchmarkSignEd25519(b, 100000) }

func BenchmarkVerifyEd255191B(b *testing.B)      { RunBenchmarkVerifyEd25519(b, 1) }
func BenchmarkVerifyEd2551910B(b *testing.B)     { RunBenchmarkVerifyEd25519(b, 10) }
func BenchmarkVerifyEd25519100B(b *testing.B)    { RunBenchmarkVerifyEd25519(b, 100) }
func BenchmarkVerifyEd255191000B(b *testing.B)   { RunBenchmarkVerifyEd25519(b, 1000) }
func BenchmarkVerifyEd2551910000B(b *testing.B)  { RunBenchmarkVerifyEd25519(b, 10000) }
func BenchmarkVerifyEd25519100000B(b *testing.B) { RunBenchmarkVerifyEd25519(b, 100000) }

func RunBenchmarkSignRSA(b *testing.B, numBytes int) {
	runBenchmarkSign(b, numBytes, RSA)
}

func RunBenchmarkSignEd25519(b *testing.B, numBytes int) {
	runBenchmarkSign(b, numBytes, Ed25519)
}

func runBenchmarkSign(b *testing.B, numBytes int, t int) {
	secret, _, err := GenerateKeyPair(t, 2048)
	if err != nil {
		b.Fatal(err)
	}
	someData := make([]byte, numBytes)
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := secret.Sign(someData)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func RunBenchmarkVerifyRSA(b *testing.B, numBytes int) {
	runBenchmarkVerify(b, numBytes, RSA)
}

func RunBenchmarkVerifyEd25519(b *testing.B, numBytes int) {
	runBenchmarkVerify(b, numBytes, Ed25519)
}

func runBenchmarkVerify(b *testing.B, numBytes int, t int) {
	var secret PrivKey
	var public PubKey
	if t == RSA {
		var err error
		secret, err = UnmarshalPrivateKey(rsaPriv)
		if err != nil {
			b.Fatal(err)
		}
		public, err = UnmarshalPublicKey(rsaPub)
		if err != nil {
			b.Fatal(err)
		}
	} else {
		var err error
		secret, public, err = GenerateKeyPair(t, 2048)
		if err != nil {
			b.Fatal(err)
		}
	}
	someData := make([]byte, numBytes)
	signature, err := secret.Sign(someData)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		valid, err := public.Verify(someData, signature)
		if err != nil {
			b.Fatal(err)
		}
		if !valid {
			b.Fatal("signature should be valid")
		}
	}
}
